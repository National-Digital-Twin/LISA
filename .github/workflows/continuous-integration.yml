# This is a basic workflow to help you get started with Actions

name: CI

on:
    push: {}
    pull_request: {}

permissions:
  actions: read
  contents: read
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build
      run: |
        echo Building and testing the app - v2
        npm ci
        npm run lint
        npm run bundle
        echo App built and tested

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: webapp
        path: ${{ github.workspace }}/backend/dist
      if: startsWith(github.ref, 'refs/heads/deployment/')

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/deployment/demo'
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: webapp
        path: dist-inb

    - name: Copy and restart
      uses: easingthemes/ssh-deploy@v5.0.3
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
        REMOTE_HOST: ${{ vars.SSH_HOST }}
        REMOTE_PORT: ${{ vars.SSH_PORT }}
        REMOTE_USER: ${{ secrets.SSH_USERNAME }}
        SOURCE: dist-inb
        SCRIPT_AFTER: |
          ~/scripts/post-deploy.sh

  deploy_ecs:
    runs-on: ubuntu-latest
    needs: [ build ]
    if: github.ref == 'refs/heads/deployment/uat' || github.ref == 'refs/heads/deployment/prod'
    steps:
    - name: Extract deployment name
      id: extract-name
      run: |
        echo "Extracting name from branch ref..."
        # Get the full branch name
        BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's|refs/heads/deployment/||')
        echo "BRANCH_NAME=$BRANCH_NAME"
        echo "env_name=$BRANCH_NAME" >> $GITHUB_ENV
        echo "deployment_name=lisa-$BRANCH_NAME" >> $GITHUB_ENV

    - name: Set up short commit SHA
      run: echo "short_sha=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

    - uses: actions/checkout@v4

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: webapp
        path: backend/dist

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.deployment_name }}-github-actions-role
        aws-region: eu-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: lisa_webapp
        IMAGE_TAG: "${{ env.env_name }}_${{ env.short_sha }}_${{ github.run_id }}"
      run: |
        docker build -f deployment/docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.deployment_name }}-webapp-ecs-task \
        --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: webapp
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.deployment_name }}-webapp
        cluster: ${{ env.deployment_name }}-ecs-cluster
        wait-for-service-stability: true
